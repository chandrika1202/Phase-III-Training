def minimizeCost(self, height, n, k):
    cache=[-1]*n
    def solveIt(index):
        if index==n-1:
            return 0
        elif cache[index]!=-1:
            return cache[index]
                
        res=100000000
        for i in range(1,k+1):
            nextindex=index+i
            if nextindex>=n:
                break
            currcost=abs(height[index]-height[nextindex])+solveIt(nextindex)
            res= min(res,currcost)
        cache[index]=res
        return res
        
    def solveItTabulization():
        cache[n-1]=0
        for index in range(n-2,-1,-1):
            res=100000000
            for i in range(1,k+1):
                nextindex=index+i
                if nextindex>=n:
                    break
                currcost=abs(height[index]-height[nextindex])+cache[nextindex]
                res= min(res,currcost)
            cache[index]=res
        return cache[0]
    return solveItTabulization()